/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  TestPaymentChannel,
  TestPaymentChannelInterface,
} from "../../../contracts/test/TestPaymentChannel";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "blockTimestamp",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
    ],
    name: "DeadlineTooEarly",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "IdAlreadyUsed",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "skMsgId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "mpMsgId",
        type: "uint256",
      },
    ],
    name: "InvalidId",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidInputLength",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidMicropaymentMessageSignature",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidSigningMessageSignature",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "InvalidSpender",
    type: "error",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "token",
            type: "address",
          },
          {
            internalType: "address",
            name: "signingKeyAddress",
            type: "address",
          },
          {
            internalType: "address",
            name: "recipient",
            type: "address",
          },
          {
            components: [
              {
                internalType: "address",
                name: "owner",
                type: "address",
              },
              {
                internalType: "address",
                name: "spender",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "value",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "nonce",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "deadline",
                type: "uint256",
              },
              {
                internalType: "uint8",
                name: "v",
                type: "uint8",
              },
              {
                internalType: "bytes32",
                name: "r",
                type: "bytes32",
              },
              {
                internalType: "bytes32",
                name: "s",
                type: "bytes32",
              },
            ],
            internalType: "struct PaymentChannel.Permit",
            name: "permitMsg",
            type: "tuple",
          },
          {
            internalType: "uint8",
            name: "v",
            type: "uint8",
          },
          {
            internalType: "bytes32",
            name: "r",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "s",
            type: "bytes32",
          },
        ],
        internalType: "struct PaymentChannel.SigningKeyMessage",
        name: "skMsg",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "uint8",
            name: "v",
            type: "uint8",
          },
          {
            internalType: "bytes32",
            name: "r",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "s",
            type: "bytes32",
          },
        ],
        internalType: "struct PaymentChannel.MicropaymentMessage",
        name: "mpMsg",
        type: "tuple",
      },
    ],
    name: "settleChannel",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "token",
            type: "address",
          },
          {
            internalType: "address",
            name: "signingKeyAddress",
            type: "address",
          },
          {
            internalType: "address",
            name: "recipient",
            type: "address",
          },
          {
            components: [
              {
                internalType: "address",
                name: "owner",
                type: "address",
              },
              {
                internalType: "address",
                name: "spender",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "value",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "nonce",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "deadline",
                type: "uint256",
              },
              {
                internalType: "uint8",
                name: "v",
                type: "uint8",
              },
              {
                internalType: "bytes32",
                name: "r",
                type: "bytes32",
              },
              {
                internalType: "bytes32",
                name: "s",
                type: "bytes32",
              },
            ],
            internalType: "struct PaymentChannel.Permit",
            name: "permitMsg",
            type: "tuple",
          },
          {
            internalType: "uint8",
            name: "v",
            type: "uint8",
          },
          {
            internalType: "bytes32",
            name: "r",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "s",
            type: "bytes32",
          },
        ],
        internalType: "struct PaymentChannel.SigningKeyMessage[]",
        name: "skMsgs",
        type: "tuple[]",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "uint8",
            name: "v",
            type: "uint8",
          },
          {
            internalType: "bytes32",
            name: "r",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "s",
            type: "bytes32",
          },
        ],
        internalType: "struct PaymentChannel.MicropaymentMessage[]",
        name: "mpMsgs",
        type: "tuple[]",
      },
    ],
    name: "settleChannels",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "signingKeyAddress",
        type: "address",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "uint8",
            name: "v",
            type: "uint8",
          },
          {
            internalType: "bytes32",
            name: "r",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "s",
            type: "bytes32",
          },
        ],
        internalType: "struct PaymentChannel.MicropaymentMessage",
        name: "mpMsg",
        type: "tuple",
      },
    ],
    name: "validateMicropaymentMessage",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "token",
            type: "address",
          },
          {
            internalType: "address",
            name: "signingKeyAddress",
            type: "address",
          },
          {
            internalType: "address",
            name: "recipient",
            type: "address",
          },
          {
            components: [
              {
                internalType: "address",
                name: "owner",
                type: "address",
              },
              {
                internalType: "address",
                name: "spender",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "value",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "nonce",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "deadline",
                type: "uint256",
              },
              {
                internalType: "uint8",
                name: "v",
                type: "uint8",
              },
              {
                internalType: "bytes32",
                name: "r",
                type: "bytes32",
              },
              {
                internalType: "bytes32",
                name: "s",
                type: "bytes32",
              },
            ],
            internalType: "struct PaymentChannel.Permit",
            name: "permitMsg",
            type: "tuple",
          },
          {
            internalType: "uint8",
            name: "v",
            type: "uint8",
          },
          {
            internalType: "bytes32",
            name: "r",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "s",
            type: "bytes32",
          },
        ],
        internalType: "struct PaymentChannel.SigningKeyMessage",
        name: "skMsg",
        type: "tuple",
      },
    ],
    name: "validateSigningKeyMessage",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6101406040523480156200001257600080fd5b506040518060400160405280600e81526020017f5061796d656e744368616e6e656c0000000000000000000000000000000000008152506040518060400160405280600181526020017f310000000000000000000000000000000000000000000000000000000000000081525060008280519060200120905060008280519060200120905060007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f90508260e081815250508161010081815250504660a08181525050620000e88184846200013760201b60201c565b608081815250503073ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff168152505080610120818152505050505050506200024b565b6000838383463060405160200162000154959493929190620001ee565b6040516020818303038152906040528051906020012090509392505050565b6000819050919050565b620001888162000173565b82525050565b6000819050919050565b620001a3816200018e565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001d682620001a9565b9050919050565b620001e881620001c9565b82525050565b600060a0820190506200020560008301886200017d565b6200021460208301876200017d565b6200022360408301866200017d565b62000232606083018562000198565b620002416080830184620001dd565b9695505050505050565b60805160a05160c05160e05161010051610120516111a46200029b6000396000610892015260006108d4015260006108b3015260006107e80152600061083e0152600061086701526111a46000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80634ce8632314610051578063c530d9051461006d578063db425f5814610089578063de6eb520146100a5575b600080fd5b61006b600480360381019061006691906109b9565b6100c1565b005b61008760048036038101906100829190610ab7565b61038d565b005b6100a3600480360381019061009e9190610b38565b61042f565b005b6100bf60048036038101906100ba9190610bc4565b61043b565b005b6100ca82610449565b6100e68260400160208101906100e09190610c04565b8261068d565b806000013582600001351461013c57816000013581600001356040517fa035ec69000000000000000000000000000000000000000000000000000000008152600401610133929190610c4a565b60405180910390fd5b6000808360000135815260200190815260200160002060009054906101000a900460ff16156101a65781600001356040517f285373ed00000000000000000000000000000000000000000000000000000000815260040161019d9190610c73565b60405180910390fd5b60016000808460000135815260200190815260200160002060006101000a81548160ff0219169083151502179055508160200160208101906101e89190610c04565b73ffffffffffffffffffffffffffffffffffffffff1663d505accf8360800160000160208101906102199190610c04565b30856080016040013586608001608001358760800160a00160208101906102409190610cc7565b8860800160c001358960800160e001356040518863ffffffff1660e01b81526004016102729796959493929190610d2b565b600060405180830381600087803b15801561028c57600080fd5b505af11580156102a0573d6000803e3d6000fd5b50505050600082608001604001358260200135106102c55782608001604001356102cb565b81602001355b905060008184608001604001356102e29190610dc9565b90508360200160208101906102f79190610c04565b73ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8560600160208101906103259190610c04565b836040518363ffffffff1660e01b8152600401610343929190610dfd565b6020604051808303816000875af1158015610362573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103869190610e5e565b5050505050565b8181905084849050146103cc576040517f7db491eb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b84849050811015610428576104158585838181106103f0576103ef610e8b565b5b90506101e0020184848481811061040a57610409610e8b565b5b905060a002016100c1565b808061042090610eba565b9150506103cf565b5050505050565b61043881610449565b50565b610445828261068d565b5050565b60007fc58e6ce7d9b2a905c78dc7384f384e5e7a1996650420b38d3481a2c0974f5bfd82600001358360200160208101906104849190610c04565b8460400160208101906104979190610c04565b8560600160208101906104aa9190610c04565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98760800160000160208101906104e19190610c04565b8860800160200160208101906104f79190610c04565b89608001604001358a608001606001358b6080016080013560405160200161052496959493929190610f02565b604051602081830303815290604052805190602001208760800160a00160208101906105509190610cc7565b8860800160c001358960800160e0013560405160200161057899989796959493929190610f63565b604051602081830303815290604052805190602001209050600061059b826107ca565b90506000600182856101800160208101906105b69190610cc7565b866101a00135876101c00135604051600081526020016040526040516105df9493929190610ff0565b6020604051602081039080840390855afa158015610601573d6000803e3d6000fd5b5050506020604051035190508360800160000160208101906106239190610c04565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610687576040517f5a16aa5900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050565b60007fd512697fc590c0f9774121d69bbe53e9e40cf89341e3f5b4a58210faa6e8a176826000013583602001356040516020016106cc93929190611035565b60405160208183030381529060405280519060200120905060006106ef826107ca565b905060006001828560400160208101906107099190610cc7565b86606001358760800135604051600081526020016040526040516107309493929190610ff0565b6020604051602081039080840390855afa158015610752573d6000803e3d6000fd5b5050506020604051035190508473ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146107c3576040517f27fc167200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050505050565b60006107dd6107d76107e4565b836108fe565b9050919050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614801561086057507f000000000000000000000000000000000000000000000000000000000000000046145b1561088d577f000000000000000000000000000000000000000000000000000000000000000090506108fb565b6108f87f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000610931565b90505b90565b600082826040516020016109139291906110e4565b60405160208183030381529060405280519060200120905092915050565b6000838383463060405160200161094c95949392919061111b565b6040516020818303038152906040528051906020012090509392505050565b600080fd5b600080fd5b600080fd5b60006101e0828403121561099157610990610975565b5b81905092915050565b600060a082840312156109b0576109af610975565b5b81905092915050565b60008061028083850312156109d1576109d061096b565b5b60006109df8582860161097a565b9250506101e06109f18582860161099a565b9150509250929050565b600080fd5b600080fd5b600080fd5b60008083601f840112610a2057610a1f6109fb565b5b8235905067ffffffffffffffff811115610a3d57610a3c610a00565b5b602083019150836101e0820283011115610a5a57610a59610a05565b5b9250929050565b60008083601f840112610a7757610a766109fb565b5b8235905067ffffffffffffffff811115610a9457610a93610a00565b5b6020830191508360a0820283011115610ab057610aaf610a05565b5b9250929050565b60008060008060408587031215610ad157610ad061096b565b5b600085013567ffffffffffffffff811115610aef57610aee610970565b5b610afb87828801610a0a565b9450945050602085013567ffffffffffffffff811115610b1e57610b1d610970565b5b610b2a87828801610a61565b925092505092959194509250565b60006101e08284031215610b4f57610b4e61096b565b5b6000610b5d8482850161097a565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b9182610b66565b9050919050565b610ba181610b86565b8114610bac57600080fd5b50565b600081359050610bbe81610b98565b92915050565b60008060c08385031215610bdb57610bda61096b565b5b6000610be985828601610baf565b9250506020610bfa8582860161099a565b9150509250929050565b600060208284031215610c1a57610c1961096b565b5b6000610c2884828501610baf565b91505092915050565b6000819050919050565b610c4481610c31565b82525050565b6000604082019050610c5f6000830185610c3b565b610c6c6020830184610c3b565b9392505050565b6000602082019050610c886000830184610c3b565b92915050565b600060ff82169050919050565b610ca481610c8e565b8114610caf57600080fd5b50565b600081359050610cc181610c9b565b92915050565b600060208284031215610cdd57610cdc61096b565b5b6000610ceb84828501610cb2565b91505092915050565b610cfd81610b86565b82525050565b610d0c81610c8e565b82525050565b6000819050919050565b610d2581610d12565b82525050565b600060e082019050610d40600083018a610cf4565b610d4d6020830189610cf4565b610d5a6040830188610c3b565b610d676060830187610c3b565b610d746080830186610d03565b610d8160a0830185610d1c565b610d8e60c0830184610d1c565b98975050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610dd482610c31565b9150610ddf83610c31565b9250828203905081811115610df757610df6610d9a565b5b92915050565b6000604082019050610e126000830185610cf4565b610e1f6020830184610c3b565b9392505050565b60008115159050919050565b610e3b81610e26565b8114610e4657600080fd5b50565b600081519050610e5881610e32565b92915050565b600060208284031215610e7457610e7361096b565b5b6000610e8284828501610e49565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610ec582610c31565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610ef757610ef6610d9a565b5b600182019050919050565b600060c082019050610f176000830189610d1c565b610f246020830188610cf4565b610f316040830187610cf4565b610f3e6060830186610c3b565b610f4b6080830185610c3b565b610f5860a0830184610c3b565b979650505050505050565b600061012082019050610f79600083018c610d1c565b610f86602083018b610c3b565b610f93604083018a610cf4565b610fa06060830189610cf4565b610fad6080830188610cf4565b610fba60a0830187610d1c565b610fc760c0830186610d03565b610fd460e0830185610d1c565b610fe2610100830184610d1c565b9a9950505050505050505050565b60006080820190506110056000830187610d1c565b6110126020830186610d03565b61101f6040830185610d1c565b61102c6060830184610d1c565b95945050505050565b600060608201905061104a6000830186610d1c565b6110576020830185610c3b565b6110646040830184610c3b565b949350505050565b600081905092915050565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b60006110ad60028361106c565b91506110b882611077565b600282019050919050565b6000819050919050565b6110de6110d982610d12565b6110c3565b82525050565b60006110ef826110a0565b91506110fb82856110cd565b60208201915061110b82846110cd565b6020820191508190509392505050565b600060a0820190506111306000830188610d1c565b61113d6020830187610d1c565b61114a6040830186610d1c565b6111576060830185610c3b565b6111646080830184610cf4565b969550505050505056fea2646970667358221220ac5b20e4c2d675f27c01c7ed9018f2a53ac43ff6be727dcb8b559dbed4c3eb9a64736f6c63430008110033";

type TestPaymentChannelConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestPaymentChannelConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestPaymentChannel__factory extends ContractFactory {
  constructor(...args: TestPaymentChannelConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TestPaymentChannel> {
    return super.deploy(overrides || {}) as Promise<TestPaymentChannel>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestPaymentChannel {
    return super.attach(address) as TestPaymentChannel;
  }
  override connect(signer: Signer): TestPaymentChannel__factory {
    return super.connect(signer) as TestPaymentChannel__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestPaymentChannelInterface {
    return new utils.Interface(_abi) as TestPaymentChannelInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestPaymentChannel {
    return new Contract(address, _abi, signerOrProvider) as TestPaymentChannel;
  }
}
