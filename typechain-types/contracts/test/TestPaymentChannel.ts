/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace PaymentChannel {
  export type PermitStruct = {
    owner: PromiseOrValue<string>;
    spender: PromiseOrValue<string>;
    value: PromiseOrValue<BigNumberish>;
    nonce: PromiseOrValue<BigNumberish>;
    deadline: PromiseOrValue<BigNumberish>;
    v: PromiseOrValue<BigNumberish>;
    r: PromiseOrValue<BytesLike>;
    s: PromiseOrValue<BytesLike>;
  };

  export type PermitStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    string,
    string
  ] & {
    owner: string;
    spender: string;
    value: BigNumber;
    nonce: BigNumber;
    deadline: BigNumber;
    v: number;
    r: string;
    s: string;
  };

  export type SigningKeyMessageStruct = {
    id: PromiseOrValue<BigNumberish>;
    token: PromiseOrValue<string>;
    signingKeyAddress: PromiseOrValue<string>;
    recipient: PromiseOrValue<string>;
    permitMsg: PaymentChannel.PermitStruct;
    v: PromiseOrValue<BigNumberish>;
    r: PromiseOrValue<BytesLike>;
    s: PromiseOrValue<BytesLike>;
  };

  export type SigningKeyMessageStructOutput = [
    BigNumber,
    string,
    string,
    string,
    PaymentChannel.PermitStructOutput,
    number,
    string,
    string
  ] & {
    id: BigNumber;
    token: string;
    signingKeyAddress: string;
    recipient: string;
    permitMsg: PaymentChannel.PermitStructOutput;
    v: number;
    r: string;
    s: string;
  };

  export type MicropaymentMessageStruct = {
    id: PromiseOrValue<BigNumberish>;
    amount: PromiseOrValue<BigNumberish>;
    v: PromiseOrValue<BigNumberish>;
    r: PromiseOrValue<BytesLike>;
    s: PromiseOrValue<BytesLike>;
  };

  export type MicropaymentMessageStructOutput = [
    BigNumber,
    BigNumber,
    number,
    string,
    string
  ] & { id: BigNumber; amount: BigNumber; v: number; r: string; s: string };
}

export interface TestPaymentChannelInterface extends utils.Interface {
  functions: {
    "settleChannel((uint256,address,address,address,(address,address,uint256,uint256,uint256,uint8,bytes32,bytes32),uint8,bytes32,bytes32),(uint256,uint256,uint8,bytes32,bytes32))": FunctionFragment;
    "settleChannels((uint256,address,address,address,(address,address,uint256,uint256,uint256,uint8,bytes32,bytes32),uint8,bytes32,bytes32)[],(uint256,uint256,uint8,bytes32,bytes32)[])": FunctionFragment;
    "validateMicropaymentMessage(address,(uint256,uint256,uint8,bytes32,bytes32))": FunctionFragment;
    "validateSigningKeyMessage((uint256,address,address,address,(address,address,uint256,uint256,uint256,uint8,bytes32,bytes32),uint8,bytes32,bytes32))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "settleChannel"
      | "settleChannels"
      | "validateMicropaymentMessage"
      | "validateSigningKeyMessage"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "settleChannel",
    values: [
      PaymentChannel.SigningKeyMessageStruct,
      PaymentChannel.MicropaymentMessageStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "settleChannels",
    values: [
      PaymentChannel.SigningKeyMessageStruct[],
      PaymentChannel.MicropaymentMessageStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "validateMicropaymentMessage",
    values: [PromiseOrValue<string>, PaymentChannel.MicropaymentMessageStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "validateSigningKeyMessage",
    values: [PaymentChannel.SigningKeyMessageStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "settleChannel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleChannels",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateMicropaymentMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateSigningKeyMessage",
    data: BytesLike
  ): Result;

  events: {};
}

export interface TestPaymentChannel extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TestPaymentChannelInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    settleChannel(
      skMsg: PaymentChannel.SigningKeyMessageStruct,
      mpMsg: PaymentChannel.MicropaymentMessageStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    settleChannels(
      skMsgs: PaymentChannel.SigningKeyMessageStruct[],
      mpMsgs: PaymentChannel.MicropaymentMessageStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    validateMicropaymentMessage(
      signingKeyAddress: PromiseOrValue<string>,
      mpMsg: PaymentChannel.MicropaymentMessageStruct,
      overrides?: CallOverrides
    ): Promise<[void]>;

    validateSigningKeyMessage(
      skMsg: PaymentChannel.SigningKeyMessageStruct,
      overrides?: CallOverrides
    ): Promise<[void]>;
  };

  settleChannel(
    skMsg: PaymentChannel.SigningKeyMessageStruct,
    mpMsg: PaymentChannel.MicropaymentMessageStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  settleChannels(
    skMsgs: PaymentChannel.SigningKeyMessageStruct[],
    mpMsgs: PaymentChannel.MicropaymentMessageStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  validateMicropaymentMessage(
    signingKeyAddress: PromiseOrValue<string>,
    mpMsg: PaymentChannel.MicropaymentMessageStruct,
    overrides?: CallOverrides
  ): Promise<void>;

  validateSigningKeyMessage(
    skMsg: PaymentChannel.SigningKeyMessageStruct,
    overrides?: CallOverrides
  ): Promise<void>;

  callStatic: {
    settleChannel(
      skMsg: PaymentChannel.SigningKeyMessageStruct,
      mpMsg: PaymentChannel.MicropaymentMessageStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    settleChannels(
      skMsgs: PaymentChannel.SigningKeyMessageStruct[],
      mpMsgs: PaymentChannel.MicropaymentMessageStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    validateMicropaymentMessage(
      signingKeyAddress: PromiseOrValue<string>,
      mpMsg: PaymentChannel.MicropaymentMessageStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    validateSigningKeyMessage(
      skMsg: PaymentChannel.SigningKeyMessageStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    settleChannel(
      skMsg: PaymentChannel.SigningKeyMessageStruct,
      mpMsg: PaymentChannel.MicropaymentMessageStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    settleChannels(
      skMsgs: PaymentChannel.SigningKeyMessageStruct[],
      mpMsgs: PaymentChannel.MicropaymentMessageStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    validateMicropaymentMessage(
      signingKeyAddress: PromiseOrValue<string>,
      mpMsg: PaymentChannel.MicropaymentMessageStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validateSigningKeyMessage(
      skMsg: PaymentChannel.SigningKeyMessageStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    settleChannel(
      skMsg: PaymentChannel.SigningKeyMessageStruct,
      mpMsg: PaymentChannel.MicropaymentMessageStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    settleChannels(
      skMsgs: PaymentChannel.SigningKeyMessageStruct[],
      mpMsgs: PaymentChannel.MicropaymentMessageStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    validateMicropaymentMessage(
      signingKeyAddress: PromiseOrValue<string>,
      mpMsg: PaymentChannel.MicropaymentMessageStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validateSigningKeyMessage(
      skMsg: PaymentChannel.SigningKeyMessageStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
